name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always
  CARGO_UNSTABLE_SPARSE_REGISTRY: "true"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - macos-latest
          - ubuntu-24.04
          - ubuntu-24.04-arm
          - windows-latest
        command:
          - test
          - clippy

    name: ${{ matrix.platform }} / ${{ matrix.command }}
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4
      - name: Configure toolchain
        run: |
          rustup toolchain install --profile minimal --no-self-update stable
          rustup default stable

      # https://github.com/actions/cache/issues/752
      - if: runner.os == 'Windows'
        name: Use GNU tar
        shell: cmd
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"

      - if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl musl-dev musl-tools gcc-aarch64-linux-gnu
          rustup target add x86_64-unknown-linux-musl
          rustup target add aarch64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-musl

      - if: runner.os == 'Linux'
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - if: runner.os == 'macOS'
        run: |
          rustup target add aarch64-apple-darwin

      - uses: Swatinem/rust-cache@v2

      - run: cargo ${{ matrix.command }}

  build:
    if: github.ref_type != 'pull_request'
    permissions:
      contents: read
      id-token: write
      attestations: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-14
          - target: aarch64-apple-darwin
            os: macos-15
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-24.04
          - target: x86_64-pc-windows-msvc
            os: windows-2022
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04-arm
          - target: aarch64-unknown-linux-musl
            os: ubuntu-24.04-arm

    name: Build / ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - name: Configure toolchain
        run: |
          rustup toolchain install --profile minimal --no-self-update stable
          rustup target add ${{ matrix.target }}
          rustup default stable

      # https://github.com/actions/cache/issues/752
      - if: runner.os == 'Windows'
        name: Use GNU tar
        shell: cmd
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"

      # Avoids depending on vcruntime*.dll, which is not present in e.g. nanoserver
      - if: runner.os == 'Windows'
        name: Statically link crt
        shell: bash
        run: |
          echo 'RUSTFLAGS=-Ctarget-feature=+crt-static' >> "$GITHUB_ENV"

      - if: runner.os == 'Linux'
        run: pip install ziglang
      - if: contains(matrix.target, 'musl')
        run: sudo apt-get update && sudo apt-get install -y musl musl-dev musl-tools

      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-zigbuild,cargo-auditable

      # zigbuild isn't compatible with auditable
      # https://github.com/rust-secure-code/cargo-auditable/issues/179
      - if: matrix.target == 'aarch64-unknown-linux-musl'
        run: cargo zigbuild -p bestool --profile dist --target ${{ matrix.target }} --features iti
      - if: matrix.target != 'aarch64-unknown-linux-musl'
        run: cargo auditable build -p bestool --profile dist --target ${{ matrix.target }}

      - uses: actions/attest-build-provenance@v2
        if: runner.os != 'Windows'
        with:
          subject-path: target/*/dist/bestool
      - uses: actions/attest-build-provenance@v2
        if: runner.os == 'Windows'
        with:
          subject-path: target/*/dist/bestool.exe
      - uses: actions/upload-artifact@v4
        with:
          name: bestool-${{ matrix.target }}-${{ github.sha }}
          if-no-files-found: error
          retention-days: 7
          path: |
            target/*/dist/bestool
            target/*/dist/bestool.exe

      - name: Configure AWS Credentials
        if: startsWith(github.ref, 'refs/tags/v')
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::143295493206:role/gha-tamanu-tools-upload
          role-session-name: GHA@BEStool=Build

      - name: Upload versioned
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          version=$(sed -E 's/refs\/tags\/v//' <<< "${{ github.ref }}")
          src="target/${{ matrix.target }}/dist/bestool"
          dest="s3://bes-ops-tools/bestool/${version}/${{ matrix.target }}/"
          if [[ ${{ runner.os }} == "Windows" ]]; then
            aws s3 cp "$src".exe "$dest" --no-progress
          else
            aws s3 cp "$src" "$dest" --no-progress
          fi
          aws cloudfront create-invalidation --distribution-id=EDAG0UBS1MN74 --paths "/bestool/${version}/*"

      - name: Upload latest
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          src="target/${{ matrix.target }}/dist/bestool"
          dest="s3://bes-ops-tools/bestool/latest/${{ matrix.target }}/"
          if [[ ${{ runner.os }} == "Windows" ]]; then
            aws s3 cp "$src".exe "$dest" --no-progress
          else
            aws s3 cp "$src" "$dest" --no-progress
          fi
          aws cloudfront create-invalidation --distribution-id=EDAG0UBS1MN74 --paths '/bestool/latest/*'

      - name: Upload for GHA
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          src="target/${{ matrix.target }}/dist/bestool"
          dest="s3://bes-ops-tools/bestool/gha"
          if [[ ${{ matrix.target }} == "x86_64-unknown-linux-gnu" ]]; then
            dest="$dest/Linux-X64"
          elif [[ ${{ matrix.target }} == "x86_64-apple-darwin" ]]; then
            dest="$dest/macOS-X64"
          elif [[ ${{ matrix.target }} == "x86_64-pc-windows-msvc" ]]; then
            src="$src.exe"
            dest="$dest/Windows-X64"
          elif [[ ${{ matrix.target }} == "aarch64-apple-darwin" ]]; then
            dest="$dest/macOS-ARM64"
          elif [[ ${{ matrix.target }} == "aarch64-unknown-linux-musl" ]]; then
            dest="$dest/Linux-ARM64"
          else
            exit 0
          fi
          aws s3 cp "$src" "$dest" --no-progress
          aws cloudfront create-invalidation --distribution-id=EDAG0UBS1MN74 --paths '/bestool/gha/*'

  tests-pass:
    if: always()
    name: Tests pass
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
