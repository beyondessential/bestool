name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    tags-ignore:
      - "*"

env:
  CARGO_TERM_COLOR: always
  CARGO_UNSTABLE_SPARSE_REGISTRY: "true"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - macos
          - ubuntu
          - windows
        command:
          - test
          - clippy

    name: ${{ matrix.platform }} / ${{ matrix.command }}
    runs-on: "${{ matrix.platform }}-latest"

    steps:
      - uses: actions/checkout@v4
      - name: Configure toolchain
        run: |
          rustup toolchain install --profile minimal --no-self-update stable
          rustup default stable

      # https://github.com/actions/cache/issues/752
      - if: runner.os == 'Windows'
        name: Use GNU tar
        shell: cmd
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"

      - if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl musl-dev musl-tools gcc-aarch64-linux-gnu
          rustup target add x86_64-unknown-linux-musl
          rustup target add aarch64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-musl

      - if: runner.os == 'Linux'
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - if: runner.os == 'macOS'
        run: |
          rustup target add aarch64-apple-darwin

      - name: Cargo caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-stable-
            ${{ runner.os }}-cargo-

      - name: Compilation caching
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-target-stable-${{ hashFiles('**/Cargo.lock') }}

      - run: cargo ${{ matrix.command }}

      - if: runner.os == 'Linux' && startsWith(matrix.command, 'build --release')
        run: |
          cargo build --release --target x86_64-unknown-linux-musl
          cargo build --release --target aarch64-unknown-linux-gnu

      - if: runner.os == 'macOS' && startsWith(matrix.command, 'build --release')
        run: |
          cargo build --release --target aarch64-apple-darwin

  build:
    if: github.ref_type != 'pull_request'

    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-pc-windows-msvc
          - aarch64-apple-darwin
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl

    name: Build / ${{ matrix.target }}
    runs-on: >-
      ${{ contains(matrix.target, 'linux') && 'ubuntu' || (
        contains(matrix.target, 'windows') && 'windows' || (
          contains(matrix.target, 'darwin') && 'macos' ||
            'ubuntu'
        )
      ) }}-latest

    steps:
      - uses: actions/checkout@v4
      - name: Configure toolchain
        run: |
          rustup toolchain install --profile minimal --no-self-update stable
          rustup target add ${{ matrix.target }}
          rustup default stable

      # https://github.com/actions/cache/issues/752
      - if: runner.os == 'Windows'
        name: Use GNU tar
        shell: cmd
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"

      - if: runner.os == 'Linux'
        run: sudo apt-get update
      - if: contains(matrix.target, 'musl')
        run: sudo apt-get install -y musl musl-dev musl-tools
      - if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get install -y gcc-aarch64-linux-gnu

      - if: runner.os == 'Linux' && matrix.target != 'x86_64-unknown-linux-gnu'
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Cargo caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-stable-
            ${{ runner.os }}-cargo-

      - name: Compilation caching
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - if: runner.os == 'Linux' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: cross build --release --target ${{ matrix.target }}
      - if: runner.os != 'Linux' || matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}

      - uses: actions/upload-artifact@v4
        with:
          name: bestool-${{ matrix.target }}-${{ github.sha }}
          if-no-files-found: error
          path: |
            target/release/bestool
            target/release/bestool.exe
            target/*/release/bestool
            target/*/release/bestool.exe

  tests-pass:
    if: always()
    name: Tests pass
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
